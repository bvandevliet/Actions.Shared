name: Docker build and push

on:
  workflow_call:
    inputs:
      CR_REGISTRY:
        type: string
        default: docker.io
        description: The container registry to push the image to.
      CSPROJ_NAME:
        type: string
        description: |
          The name of the .csproj file, expected to exist in an equally named folder in the root of the repository.
          Leave empty to skip dotnet build steps before building the image from the Dockerfile, e.g. for non-dotnet projects.
      DOTNET_VERSION:
        type: string
        default: '8'
        description: The version of the dotnet SDK, see https://github.com/actions/setup-dotnet/tree/v4/#supported-version-syntax.
      IMAGE_NAME:
        type: string
        required: true
        description: The name of the image to be built and pushed, format is registry_owner/image_name.
      majorMinorPatch:
        type: string
        required: true
        description: The major.minor.patch version of the image, you can use the git-version.yml workflow template to generate this.
      preReleaseLabel:
        type: string
        required: true
        description: The pre-release label of the image, you can use the git-version.yml workflow template to generate this.
      semVer:
        type: string
        required: true
        description: The semantic version of the image, you can use the git-version.yml workflow template to generate this.
      assemblySemVer:
        type: string
        required: true
        description: The assembly semantic version of the image, you can use the git-version.yml workflow template to generate this.
      assemblySemFileVer:
        type: string
        required: true
        description: The assembly semantic file version of the image, you can use the git-version.yml workflow template to generate this.
    secrets:
      CR_USERNAME:
        required: true
        description: The username to authenticate with the container registry.
      CR_PASSWORD:
        required: true
        description: The password to authenticate with the container registry.

env:
  IS_PUSH: ${{ github.event_name == 'push' }}
  IS_MAIN: ${{ github.event.repository.default_branch == github.ref_name }}

jobs:
  build-push:
    name: Build and push
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      -
        name: Checkout
        uses: actions/checkout@main
      -
        name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ inputs.IMAGE_NAME }}
          tags: |
            type=schedule,pattern=nightly
            type=raw,enable=${{ env.IS_PUSH == 'true' && env.IS_MAIN == 'true' }},value=nightly
            type=raw,enable=${{ env.IS_PUSH == 'true' && env.IS_MAIN == 'true' }},value=latest
            type=raw,enable=${{ env.IS_PUSH == 'true' && env.IS_MAIN == 'true' }},value=${{ inputs.majorMinorPatch }}
            type=raw,enable=${{ env.IS_PUSH == 'false' || env.IS_MAIN == 'false' }},value=${{ inputs.preReleaseLabel }}
            type=raw,enable=${{ env.IS_PUSH == 'false' || env.IS_MAIN == 'false' }},value=${{ inputs.semVer }}
      -
        name: Setup dotnet
        if: steps.meta.outputs.tags != '' && inputs.CSPROJ_NAME != ''
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.DOTNET_VERSION }}
      -
        name: Dotnet build ${{ inputs.CSPROJ_NAME }}
        if: steps.meta.outputs.tags != '' && inputs.CSPROJ_NAME != ''
        run: |
          dotnet publish "${{ inputs.CSPROJ_NAME }}/${{ inputs.CSPROJ_NAME }}.csproj" \
          -c Release /p:UseAppHost=false \
          /p:Version=${{ inputs.semVer }} \
          /p:AssemblyVersion=${{ inputs.assemblySemVer }} \
          /p:FileVersion=${{ inputs.assemblySemFileVer }}
      -
        name: Set up Buildx
        if: steps.meta.outputs.tags != ''
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
      -
        name: Build image for ${{ inputs.CSPROJ_NAME }}
        if: steps.meta.outputs.tags != ''
        uses: docker/build-push-action@v6
        with:
          context: ./${{ inputs.CSPROJ_NAME }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          load: true
      -
        name: Get image and tag for Trivy scan
        if: steps.meta.outputs.tags != ''
        id: trivy-image
        run: echo "ref=$(echo ${{ steps.meta.outputs.tags }} | cut -d ',' -f 1)" >> $GITHUB_OUTPUT
      -
        name: Generate Trivy vulnerability report
        if: steps.meta.outputs.tags != ''
        uses: aquasecurity/trivy-action@master
        env:
          TRIVY_SKIP_DB_UPDATE: true
          TRIVY_SKIP_JAVA_DB_UPDATE: true
        with:
          image-ref: ${{ steps.trivy-image.outputs.ref }}
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-image.sarif'
          exit-code: 0
      -
        name: Upload Trivy scan results
        if: steps.meta.outputs.tags != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-image.sarif'
      -
        name: Login to container registry
        if: steps.meta.outputs.tags != ''
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.CR_REGISTRY }}
          username: ${{ secrets.CR_USERNAME }}
          password: ${{ secrets.CR_PASSWORD }}
      -
        name: Push ${{ inputs.CSPROJ_NAME }} to registry
        if: steps.meta.outputs.tags != ''
        uses: docker/build-push-action@v6
        with:
          context: ./${{ inputs.CSPROJ_NAME }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ steps.buildx.outputs.platforms }}
          push: true