name: Docker build and push

on:
  workflow_call:
    inputs:
      CR_REGISTRY:
        type: string
        default: docker.io
      PROJECT:
        type: string
        required: true
      IMAGE_NAME:
        type: string
        required: true
      majorMinorPatch:
        type: string
        required: true
      preReleaseLabel:
        type: string
        required: true
      semVer:
        type: string
        required: true
      assemblySemVer:
        type: string
        required: true
      assemblySemFileVer:
        type: string
        required: true
    secrets:
      CR_USERNAME:
        required: true
      CR_PASSWORD:
        required: true

env:
  IS_PUSH: ${{ github.event_name == 'push' }}
  IS_MAIN: ${{ github.event.repository.default_branch == github.ref_name }}

jobs:
  build-push:
    name: Build and push
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      -
        name: Checkout
        uses: actions/checkout@main
      -
        name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ inputs.CR_REGISTRY }}/${{ inputs.IMAGE_NAME }}
          tags: |
            type=schedule,pattern=nightly
            type=raw,enable=${{ env.IS_PUSH == 'true' && env.IS_MAIN == 'true' }},value=nightly
            type=raw,enable=${{ env.IS_PUSH == 'true' && env.IS_MAIN == 'true' }},value=latest
            type=raw,enable=${{ env.IS_PUSH == 'true' && env.IS_MAIN == 'true' }},value=${{ inputs.majorMinorPatch }}
            type=raw,enable=${{ env.IS_PUSH == 'false' || env.IS_MAIN == 'false' }},value=${{ inputs.preReleaseLabel }}
            type=raw,enable=${{ env.IS_PUSH == 'false' || env.IS_MAIN == 'false' }},value=${{ inputs.semVer }}
      -
        name: Setup dotnet
        if: steps.meta.outputs.tags != ''
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8'
      -
        name: Build ${{ inputs.PROJECT }}
        if: steps.meta.outputs.tags != ''
        run: |
          dotnet publish "${{ inputs.PROJECT }}/${{ inputs.PROJECT }}.csproj" \
          -c Release /p:UseAppHost=false \
          /p:Version=${{ inputs.semVer }} \
          /p:AssemblyVersion=${{ inputs.assemblySemVer }} \
          /p:FileVersion=${{ inputs.assemblySemFileVer }}
      -
        name: Set up Buildx
        if: steps.meta.outputs.tags != ''
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
      -
        name: Build image for ${{ inputs.PROJECT }}
        if: steps.meta.outputs.tags != ''
        uses: docker/build-push-action@v6
        with:
          context: ./${{ inputs.PROJECT }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          load: true
      -
        name: Get image and tag for Trivy scan
        if: steps.meta.outputs.tags != ''
        id: trivy-image
        run: echo "ref=$(echo ${{ steps.meta.outputs.tags }} | cut -d ',' -f 1)" >> $GITHUB_OUTPUT
      -
        name: Generate Trivy vulnerability report
        if: steps.meta.outputs.tags != ''
        uses: aquasecurity/trivy-action@master
        env:
          TRIVY_SKIP_DB_UPDATE: true
          TRIVY_SKIP_JAVA_DB_UPDATE: true
        with:
          image-ref: ${{ steps.trivy-image.outputs.ref }}
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-image.sarif'
          exit-code: 0
      -
        name: Upload Trivy scan results
        if: steps.meta.outputs.tags != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-image.sarif'
      -
        name: Login to container registry
        if: steps.meta.outputs.tags != ''
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.CR_REGISTRY }}
          username: ${{ secrets.CR_USERNAME }}
          password: ${{ secrets.CR_PASSWORD }}
      -
        name: Push ${{ inputs.PROJECT }} to registry
        if: steps.meta.outputs.tags != ''
        uses: docker/build-push-action@v6
        with:
          context: ./${{ inputs.PROJECT }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ steps.buildx.outputs.platforms }}
          push: true